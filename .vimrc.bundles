
set rtp+=~/.vimrc_neovim/.vim
set rtp+=~/.fzf

call plug#begin('~/.vimrc_neovim/.vim/bundle')

" Syntax, Snippets
"Plug 'w0rp/ale'

" Git
Plug 'mhinz/vim-signify'

" Grep
Plug 'dkprice/vim-easygrep'

" UI
Plug 'kien/rainbow_parentheses.vim'
Plug 'ntpeters/vim-better-whitespace'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" theme
Plug 'liuchengxu/space-vim-dark'
Plug 'NLKNguyen/papercolor-theme'
Plug 'atelierbram/vim-colors_atelier-schemes'
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'yuttie/inkstained-vim'
Plug 'glepnir/zephyr-nvim'

" Search, Files, Buffer, Find...
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'liuchengxu/vim-which-key'
Plug 'skywind3000/vim-quickui'
Plug 'skywind3000/quickmenu.vim'

Plug 'nvim-lua/popup.nvim'
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim'

Plug 'Shougo/defx.nvim'
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'
Plug 'kristijanhusak/defx-icons'

" Edit
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'godlygeek/tabular'
Plug 'vim-scripts/VisIncr'
Plug 'terryma/vim-expand-region'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-surround'
Plug 'jiangmiao/auto-pairs'
Plug 'ervandew/supertab'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'scrooloose/nerdcommenter'
Plug 'psliwka/vim-smoothie'
Plug 'danilamihailov/beacon.nvim'

call plug#end()

" " Config Defx
" let g:maplocalleader=','
" nnoremap <silent> <LocalLeader>e
" \ :<C-u>Defx -resume -toggle -buffer-name=tab`tabpagenr()`<CR>
" nnoremap <silent> <LocalLeader>a
" \ :<C-u>Defx -resume -buffer-name=tab`tabpagenr()` -search=`expand('%:p')`<CR>
"
"
" function! s:defx_mappings() abort
"     " Defx window keyboard mappings
"     setlocal signcolumn=no
"
"     nnoremap <silent><buffer><expr> o <SID>defx_toggle_tree()
" endfunction
"
" function! s:defx_toggle_tree() abort
"     " Open current file, or toggle directory expand/collapse
"     if defx#is_directory()
"         return defx#do_action('open_or_close_tree')
"     else
"         return defx#do_action('multi', ['drop'])
" endfunction
"
"
" call defx#custom#option('_', {
"     \ 'columns': 'indent:git:icons:filename',
"     \ 'winwidth': 25,
"     \ 'split': 'vertical',
"     \ 'direction': 'topleft',
"     \ 'listed': 1,
"     \ 'show_ignored_files': 0,
"     \ 'root_marker': 'â‰¡ ',
"     \ 'ignored_files':
"     \     '.mypy_cache,.pytest_cache,.git,.hg,.svn,.stversions'
"     \   . ',__pycache__,.sass-cache,*.egg-info,.DS_Store,*.pyc,*.swp'
"     \ })
"
" autocmd FileType defx call s:defx_mappings()

